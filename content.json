{"meta":{"title":"kala的博客","subtitle":"个人学习笔记、踩坑记录、感悟分享","description":"陈禄伟的个人博客","author":"kala","url":"http://blog.c2wei.cn","root":"/"},"pages":[{"title":"archives","date":"2019-12-12T09:38:38.000Z","updated":"2019-12-14T16:05:50.038Z","comments":true,"path":"archives/index.html","permalink":"http://blog.c2wei.cn/archives/index.html","excerpt":"","text":""},{"title":"关于我","date":"2019-12-16T15:03:14.143Z","updated":"2019-12-16T15:03:14.136Z","comments":true,"path":"about/index.html","permalink":"http://blog.c2wei.cn/about/index.html","excerpt":"","text":"我叫陈禄伟，现大四狗一枚"},{"title":"标签","date":"2019-12-12T09:37:27.000Z","updated":"2019-12-12T09:45:49.634Z","comments":true,"path":"tags/index.next.html","permalink":"http://blog.c2wei.cn/tags/index.next.html","excerpt":"","text":""},{"title":"分类","date":"2019-12-12T09:39:12.000Z","updated":"2019-12-12T09:44:52.348Z","comments":true,"path":"categories/index.next.html","permalink":"http://blog.c2wei.cn/categories/index.next.html","excerpt":"","text":""},{"title":"","date":"2019-12-14T15:32:20.447Z","updated":"2019-12-14T14:20:18.810Z","comments":false,"path":"categories/index.html","permalink":"http://blog.c2wei.cn/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-12-14T15:11:40.459Z","updated":"2019-12-14T15:11:40.459Z","comments":false,"path":"tags/index.html","permalink":"http://blog.c2wei.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo搭建个人博客","slug":"hexo搭建个人博客","date":"2019-09-11T10:16:06.000Z","updated":"2019-12-15T12:10:38.892Z","comments":true,"path":"2019/09/11/hexo搭建个人博客/","link":"","permalink":"http://blog.c2wei.cn/2019/09/11/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"hexo是一个简洁高效美观的静态博客，拥有许多主题和拓展，功能丰富，部署和写作方便，完美支持md。 hexo基于nodejs驱动，因此开始前本地先配置好nodejs环境，服务器仅需要一个服务器软件（推荐nginx）。 以下为安装配置hexo、安装next主题美化、及写作并发布到服务器的过程。","text":"hexo是一个简洁高效美观的静态博客，拥有许多主题和拓展，功能丰富，部署和写作方便，完美支持md。 hexo基于nodejs驱动，因此开始前本地先配置好nodejs环境，服务器仅需要一个服务器软件（推荐nginx）。 以下为安装配置hexo、安装next主题美化、及写作并发布到服务器的过程。 安装hexo和添加主题安装hexo本部分在本地电脑进行 命令行执行 1npm install -g hexo-cli 创建博客 选择一个合适的位置进行，以后新建、编辑及删除文章都将在这个目录下 1hexo init blog2cd blog3npm install 编辑配置 1vim _config.yml 现在先简单修改以下几项 1title: Hexo #站点的标题2subtitle: #站点的副标题3description: #站点的描述，写一段话来介绍你的博客吧:)，主要为SEO使用4author: #显示的文章作者名字5language: #语言。简体中文是zh6timezone: #时区，可以不配置，默认以本地时区为准 保存完毕后，执行 1hexo server 在浏览器访问localhost:4000可以看到大概了 安装next主题进行美化命令行进入上一步的博客目录 1cd blog2git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next 编辑配置文件 1vim _config.yml 找到theme项 1theme: next 现在重新执行hexo server可以看到主题已经修改了 修改主题配置 1vim themes&#x2F;next&#x2F;_config.yml 搜索下面的项并修改 scheme定义了主题的外观，Pisces是常用的双栏布局，人气较高 1#scheme: Muse2#scheme: Mist3scheme: Pisces language定义语言，改为简体中文 1language: zh-Hans 添加头像，头像图片文件放在主题目录的source/images下，即/blog/themes/next/source/images/avatar.png 1avatar: &#x2F;images&#x2F;avatar.png 文章编辑等常用命令新建一篇文章，执行命令 1hexo new &quot;文章标题&quot; 执行新建命令后会在blog/source/_posts下生成一个md文件，用自己顺手的编辑器打开编辑即可，每次文章变动后，需要执行以下命令，编译生成静态文件 1hexo generate 本地文件同步到服务器，执行如下部署命令 1hexo deploy 但是需要先配置服务器信息 部署到服务器hexo的一键部署功能可以方便的将生成的静态文件推送到远程git仓库(或是其它库) 我使用webhooks完成网站在服务器的自动更新部署 本文用的是gitee，使用github基本一样，github-webhooks 添加git仓库地址到hexo配置首先在gitee网站建立一个git仓库 然后修改本地配置文件_config.yml 1# Deployment2## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html3deploy:4 type: &#39;git&#39;5 repo: &#39;https:&#x2F;&#x2F;gitee.com&#x2F;username&#x2F;blog-hexo.git&#39; #git仓库地址 安装一个hexo插件 1npm install hexo-deploy-git --save 现在执行hexo deploy就会发现已经能推送到git仓库了 克隆仓库到服务器将仓库clone到服务器上的一个位置，如/home/wwwroot/ 1cd &#x2F;home&#x2F;wwwroot2git clone 仓库git地址 我的仓库名是blog，因此得到了/home/wwwroot/blog目录 编辑服务器配置将期望的域名解析到这个目录 查看执行php程序的用户登录自己的服务器 编辑php.ini，确保解锁system,shell_exec函数 可以通过如下php文件查看服务器是用哪个用户执行php程序的 1&lt;?php2system(\"whoami\"); 浏览器访问以上php文件可以看到结果（一定要用浏览器），我的是www用户 将/home/wwwroot/blog的所有者设为该www用户 1chown -R www:www /home/wwwroot/blog 配置部署公钥到服务器www用户目录下建立ssh密钥 1cd &#x2F;home&#x2F;www2sudo -Hu www ssh-keygen -t rsa -C &quot;your_name@example.com&quot; 3&#x2F;&#x2F;注意改为自己的邮箱 查看密钥内容并复制 1cat &#x2F;home&#x2F;www&#x2F;.ssh&#x2F;id_rsa.pub 到gitee打开仓库的设置页-&gt;部署公钥设置，新建一个公钥并填入 配置webhooks打开仓库设置-&gt;webhooks-&gt;添加webhooks 有两个参数 URL：能访问到自己的服务器即可，例如example.com/hooks.php 该地址只要和博客在一台服务器上即可，不一定为博客地址或在博客地址下 密码：随意填写一个，用于检验，例如填写kalakala 选择事件只勾选push，同时勾选激活，点击添加 在服务器对应位置编辑hooks.php，内容如下 1&lt;?php2$secret &#x3D; &quot;kalakala&quot;; &#x2F;&#x2F;密钥，和 Gitee 上对应3if ($_SERVER[&quot;HTTP_X_GITEE_TOKEN&quot;] &#x3D;&#x3D; $secret) &#123;4 $ret &#x3D; shell_exec(&quot;cd &#x2F;home&#x2F;wwwroot&#x2F;blog &amp;&amp; git pull 2&gt;&amp;1&quot;);5 echo &quot;更新成功&quot;;6 var_dump($ret);7&#125; else &#123;8 echo &quot;密钥错误&quot;;9&#125; 随意修改一下博客文章内容，执行hexo generate再执行hexo deploy部署测试一下 已经可以自动更新部署了","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.c2wei.cn/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"http://blog.c2wei.cn/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"php禁用eval","slug":"php禁用eval","date":"2019-04-18T09:11:16.000Z","updated":"2019-12-17T10:43:46.895Z","comments":true,"path":"2019/04/18/php禁用eval/","link":"","permalink":"http://blog.c2wei.cn/2019/04/18/php%E7%A6%81%E7%94%A8eval/","excerpt":"","text":"最近在做的一个项目，网站被人用图片挂木马了，图片里是一段PHP代码 1&lt;?php eval($_GET['k']); ?&gt; 虽然网站还不至于被随意宰割，但是这可不是个小问题，图片挂马这种东西我暂时还研究不透，就先把eval函数禁用吧 打开php.ini，找到disable_functions，添加上eval，保存重启php。。。 eval居然还能使用！修改disable_functions无法禁用eval()！ 语言结构和函数原来，eval在php中，并不是一个函数，它是一个语言结构，也叫做语言构造器，语言结构看起来和函数一样，实际上它是php语法的一部分，也就是一个关键字。 php执行时，函数都要被php解析器先进行解析，分解为语言结构才会进一步执行，就是说语言结构比函数效率更高。 语言结构除了无法被php.ini中的disable_functions禁用外，也不能作为回调函数。可以通过function_exists()判断函数和语言结构 1&lt;?php2$list = ['echo', 'print', 'isset', 'empty', 'eval', 'system', 'shell_exec','array_key_exists', 'array_map'];3$rlt = array_map(function($name) &#123;4 if (function_exists($name)) &#123;5 return $name.\":函数\";6 &#125; else &#123;7 return $name.\":语言结构\";8 &#125;9&#125;, $list);10print_r($list); 执行结果为 1Array2(3 [0] &#x3D;&gt; echo:语言结构4 [1] &#x3D;&gt; print:语言结构5 [2] &#x3D;&gt; isset:语言结构6 [3] &#x3D;&gt; empty:语言结构7 [4] &#x3D;&gt; eval:语言结构8 [5] &#x3D;&gt; system:函数9 [6] &#x3D;&gt; shell_exec:函数10 [7] &#x3D;&gt; array_key_exists:函数11 [8] &#x3D;&gt; array_map:函数12) 可以看到我们熟悉的isset，empty都是语言结构，尽管用起来和函数一样 禁用方法通过安装一个拓展，php5和php7都适用，拓展github地址：PHP_diseval_extension 作者提供了安装脚本，不过我没有使用，还是自己安装得劲 拉取仓库并切换到拓展源码目录 1git clone https:&#x2F;&#x2F;github.com&#x2F;mk-j&#x2F;PHP_diseval_extension.git2cd PHP_diseval_extension&#x2F;source 编译 1phpize2.&#x2F;configure --with-php-config&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;php-config #注意更改php-config地址3make4sudo make install 成功后出现.so文件的位置，复制一下 打开php.ini，添加extension = &quot;/your_path/diseval.so&quot;; 保存重启php，OK 下一步要研究图片挂马。。。","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://blog.c2wei.cn/tags/php/"}]},{"title":"ubuntu18安装sublime及解决不能中文输入","slug":"ubuntu18安装sublime及解决不能中文输入","date":"2018-09-12T13:47:51.000Z","updated":"2019-12-15T12:01:02.686Z","comments":true,"path":"2018/09/12/ubuntu18安装sublime及解决不能中文输入/","link":"","permalink":"http://blog.c2wei.cn/2018/09/12/ubuntu18%E5%AE%89%E8%A3%85sublime%E5%8F%8A%E8%A7%A3%E5%86%B3%E4%B8%8D%E8%83%BD%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/","excerpt":"","text":"ubuntu18更换了桌面环境，配置sublime启动器时略有不同，大概安装和ubuntu16一致 本文从头开始安装sublime并添加中文输入支持 安装sublime到 sublime官网下载linux可用的sublime_text_3程序包(非安装包) 解压后得到一个sublime_text_3文件夹 把文件夹移动到/opt/ 1mv sublime_text_3 &#x2F;opt&#x2F; 然后重命名为sublime_text 1mv &#x2F;opt&#x2F;sublime_text_3 &#x2F;opt&#x2F;sublime_text 现在sublime已经安装到了/opt/目录，但是还没有启动图标和无法使用中文输入法 下载和添加中文支持共享库下载我们需要的文件，打开终端，输入： 1git clone https:&#x2F;&#x2F;github.com&#x2F;lyfeyaj&#x2F;sublime-text-imfix.git 将subl移动到/usr/bin/，并且将sublime-imfix.so移动到/opt/sublime_text/（sublime的安装目录）终端输入： 1cd ~&#x2F;sublime-text-imfix2sudo cp .&#x2F;lib&#x2F;libsublime-imfix.so &#x2F;opt&#x2F;sublime_text&#x2F;3sudo cp .&#x2F;src&#x2F;subl &#x2F;usr&#x2F;bin&#x2F; 用subl命令试试能不能启动sublime，如果成功启动的话，应该就可以输入中文了。终端输入： 1LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so subl 配置启动图标新建文件sublime.desktop 1vim sublime.desktop 填入以下内容 1[Desktop Entry]2Version&#x3D;1.03Type&#x3D;Application4Name&#x3D;Sublime Text5GenericName&#x3D;Text Editor6Comment&#x3D;Sophisticated text editor for code, markup and prose7Exec&#x3D;bash -c &quot;LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so subl&quot;8Terminal&#x3D;false9MimeType&#x3D;text&#x2F;plain;10Icon&#x3D;sublime-text11Categories&#x3D;TextEditor;Development;12StartupNotify&#x3D;true13Actions&#x3D;Window;Document;1415[Desktop Action Window]16Name&#x3D;New Window17Exec&#x3D;bash -c &quot;LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so subl&quot;18OnlyShowIn&#x3D;Gnome;1920[Desktop Action Document]21Name&#x3D;New File22Exec&#x3D;bash -c &quot;LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so subl&quot;23OnlyShowIn&#x3D;Gnome; 保存后，修改文件权限 1chown 用户名:用户名 sublime.desktop2用户名为当前登录到ubuntu的用户名 在图形界面下找到文件，右击文件 选择属性-&gt;权限，勾选“允许作为可执行文件”，顺便查看一下用户组是否为当前用户 关闭属性界面，双击文件，选择“trust and lanuch” 如果能正常启动应用，就创建成功了 然后移动到/usr/share/applications 1mv sublime.desktop &#x2F;usr&#x2F;local&#x2F;applications&#x2F; 现在打开程序列表，就找到sublime的图标了 完成","categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.c2wei.cn/categories/ubuntu/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.c2wei.cn/tags/ubuntu/"},{"name":"sublime","slug":"sublime","permalink":"http://blog.c2wei.cn/tags/sublime/"}]},{"title":"ubuntu18添加应用到启动器","slug":"ubuntu18添加应用到启动器","date":"2018-08-12T08:45:00.000Z","updated":"2019-12-15T12:01:04.904Z","comments":true,"path":"2018/08/12/ubuntu18添加应用到启动器/","link":"","permalink":"http://blog.c2wei.cn/2018/08/12/ubuntu18%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E5%88%B0%E5%90%AF%E5%8A%A8%E5%99%A8/","excerpt":"","text":"ubuntu18更换了桌面环境为Gnome，二进制文件启动的应用不能固定到dock，如sublime、idea等，需要自己创建启动图标并添加到启动器 首先创建一个后缀名为.desktop的文件 然后填入以下内容 1[Desktop Entry]2Name&#x3D;[软件名称]3Comment&#x3D;[软件介绍]45GenericName&#x3D;[注释，副标题]6Exec&#x3D;[启动命令，可执行文件路径或在环境变量中设定好的指令均可]7Icon&#x3D;[软件图标，png、svg都可以]8Type&#x3D;Application9StartupNotify&#x3D;true10Categories&#x3D;[软件分类目录]11MimeType&#x3D;[软件类型] 例： 1[Desktop Entry]2Name&#x3D;PyCharm3Comment&#x3D;Full-featured IDE for Python &amp; Web development4GenericName&#x3D;jetbrains PyCharm Professional5Exec&#x3D;charm6Icon&#x3D;&#x2F;opt&#x2F;pycharm&#x2F;bin&#x2F;pycharm.svg7Type&#x3D;Application8StartupNotify&#x3D;true9Categories&#x3D;Development;IDE;10MimeType&#x3D;Development;IDE; 保存 注意:该文件的所有权一定要是当前用户，即开机时登录的用户，这样才能对启动文件进行信任修改所有权的命令 1sudo chown 用户名:用户名 文件名 另外启动命令一定要正确 右击文件，选择属性-&gt;权限，勾选“允许作为可执行文件”，顺便查看一下用户组是否为当前用户 关闭属性界面，双击文件，选择“trust and lanuch” 如果能正常启动应用，就可以添加到桌面或是系统应用列表了 系统应用列表目录为/usr/share/applications/ 直接将文件移动到目录即可，启动器就会出现图标 右击应用列表中的应用图标会有添加到收藏夹，就可以添加到dock了","categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.c2wei.cn/categories/ubuntu/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.c2wei.cn/tags/ubuntu/"}]},{"title":"使用docker部署一个老项目","slug":"使用docker部署一个老项目","date":"2018-06-10T11:40:31.000Z","updated":"2019-12-15T12:47:28.955Z","comments":true,"path":"2018/06/10/使用docker部署一个老项目/","link":"","permalink":"http://blog.c2wei.cn/2018/06/10/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%E8%80%81%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"docker是什么先摘一段官方的解释： Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 我看完了，emmmm这到底是个啥玩意，只是听说有了这个可以简化部署就来了，可这到底是个啥…… 这个东西有一点像虚拟机，但是性能开销远小于虚拟机，docker有镜像和容器，镜像就像是系统的镜像，并且包含了环境和一些特定配置。然后可以选择一个镜像来启动一个容器（类似于类-&gt;对象），然后我们将自己的应用程序放到容器里。 举一个最简单的例子，我的服务器是nginx+php7+mysql5.7的环境，并且运行着好几个网站，现在拿到了一个老网站，它只能用apache+php5.4+mysql5来运行，可我又没有其它服务器，又必须要把它跑起来，这时候怎么办？ 当然重构这个网站是一定不可能的，所以…… 是的，就用docker解决这个问题，我们选取一个带有apache+php5.4+mysql5的docker镜像，然后启动一个容器，将这个老项目放到这个容器中，然后就可以运行了。现在我们开始做这件事。 如何使用docker安装启用docker首先，安装docker 1wget -qO- https:&#x2F;&#x2F;get.docker.com&#x2F; | sh centos源里有docker 1yum -y install docker-io 然后启动docker服务 1sudo service docker start 之后我们会从docker的镜像仓库里下载镜像，默认用的是国外的，比较慢，我们替换成国内的 打开/etc/default/docker文件（需要sudo权限），在文件的底部加上一行。 1DOCKER_OPTS&#x3D;&quot;--registry-mirror&#x3D;https:&#x2F;&#x2F;registry.docker-cn.com&quot; 网易的镜像源也不错：http://hub-mirror.c.163.com 现在准备工作完成了。 部署项目搜索符合我们要求的镜像 1sudo docker search 关键字 我搜索关键字为php54，找到fbender/php54-apache-mysql镜像符合要求 拉取符合要求的镜像 1sudo docker pull 镜像名字2如：sudo docker pull fbender&#x2F;php54-apache-mysql 下载完成后，启动容器 1sudo docker run --name 自定义名称 -v ～&#x2F;docker&#x2F;www:&#x2F;var&#x2F;www&#x2F;html -d fbender&#x2F;php54-apache-mysql 解释一下： –name 为自定义的名称，可以后续作为该容器的标识 -v 将容器里的/var/www/html映射到本机的～/docker/www（要部署的网站放在本机的这个目录就可以了） -d 后台运行 然后将那个老网站放到映射到的本机目录 现在要获取这个容器分配到的ip 1sudo docker inspect 自定义的名称或容器id | grep &#39;&quot;IPAddress&quot;&#39; 我分配到的是172.17.0.3 浏览器输入172.17.0.3然后回车，这个老网站就出来了（服务器上当然没这个操作，ping一下或者curl吧） 其他一些操作查看当前运行中的容器 1sudo docker ps 查看运行中的容器（-a表示包括停止运行的） 1sudo docker ps2sudo docker ps -a 停止一个容器 1sudo docker stop 容器id或自定名称 重新启动容器 1sudo docker start 容器id或自定名称 删除一个容器 1sudo docker container rm 容器id或自定名称 以命令行交互模式打开容器(就是进入一个linux，通常是ubuntu) 11.第一次运行时2sudo docker run -it 镜像名称 bash32.运行中的4sudo docker exec -it 容器id或自定名称 bash 使用反向代理以上我们可以用一个ip访问，这样肯定达不到部署的要求 为了用域名访问，用nginx的反向代理功能吧 新建一个nginx的虚拟主机，配置如下 server { listen 80; #listen [::]:80; server_name 虚拟主机的域名 ; index index.html index.htm index.php; location / { proxy_pass http://docker分配到的ip; #Proxy Settings proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; proxy_max_temp_file_size 0; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; } }更多姿势以上是一个比较简单的使用，docker的功能非常强 官方文档：https://docs.docker.com/ 推荐网址：http://www.docker.org.cn/ 阮一峰大大的入门文章： http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html 在上例中，如果只是对php有特定要求（或其他应用），完全可以只含有php的docker镜像 也可以创建包含自己应用的docker镜像，还要继续学习~","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.c2wei.cn/tags/docker/"}]},{"title":"科学上网","slug":"科学上网","date":"2017-09-15T13:05:56.000Z","updated":"2019-12-17T03:54:36.093Z","comments":true,"path":"2017/09/15/科学上网/","link":"","permalink":"http://blog.c2wei.cn/2017/09/15/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/","excerpt":"","text":"今年年初时，工信部发布通知，在全国范围内对互联网网络接入服务市场开展清理规范工作， 其中重要的一条就是处理各种vpn服务商。 著名的greenvpn在七月份的时候停止服务了，于是我傻乎乎的又从网上随便选择了一家机场，结果刚用了一个月多，人家就关站跑路了，买了半年的，剩下的钱也无处可寻。 几十块钱是小事，但是不能不用谷歌了，还是要科学上网呀。既然机场不再可靠，那就自己搭梯子 购买国外服务器既然要搭梯子，那需要一个位于国外的服务器来做梯子， 以下两家提供商还不错，且都可以用支付宝支付： 搬瓦工：https://bandwagonhost.com/ Vultr: https://www.vultr.com/ 服务器配置不用多好，单核就够用，vps云计算实例都可，找最便宜的买 尽量支持IPv4，系统安装centos7 64位，记下公网ip和设置的密码 配置shadowsocksshadowsocks简称ss，是一款著名的开源代理软件，搭梯子神器 分为客户端和服务端两个部分，服务端安装在梯子服务器上，客户端安装在我们的电脑或手机上 服务端我用的go语言版的二进制程序包，感觉还不错 server端配置，登录服务器 1ssh root@server_ip 关闭防火墙 1systemctl stop firewalld.service 下载shadowsocks-go 1wget https:&#x2F;&#x2F;github.com&#x2F;shadowsocks&#x2F;shadowsocks-go&#x2F;releases&#x2F;download&#x2F;1.2.1&#x2F;shadowsocks-server.tar.gz 解压程序包 1tar -zxvf shadowsocks-server.tar.gz 得到的是二进制可执行文件，新建一个文件夹，用于存放执行文件和配置文件 1mkdir ss2mv shadowsocks-server ss&#x2F; 赋予执行权限 1cd ss2chmod +x shadowsocks-server 创建一个配置文件 1vim conf.json 内容如下： 1&#123;2 &quot;server&quot;: &quot;0.0.0.0&quot;,3 &quot;server_port&quot;: 8388,4 &quot;password&quot;: &quot;secret&quot;,5 &quot;method&quot;: &quot;aes-256-cfb&quot;6&#125; 编写启动脚本 1vim ss-server.sh 内容： 1nohup &#x2F;root&#x2F;ss&#x2F;shadowsocks-server -c &#x2F;root&#x2F;ss&#x2F;conf.json &gt; log.txt &amp; 赋予执行权限 1chmod +x ss-server.sh 启动脚本 1.&#x2F;ss-server.sh 现在可以打开客户端连接测试一下 服务器地址填服务器的公网ip，密码和服务器端口还有加密方式填刚才配置的 应该可以使用了 添加开机启动先给rc.local执行权限，用它在开机的时候启动脚本 1chmod +x &#x2F;etc&#x2F;rc.d&#x2F;rc.local 然后编辑/etc/rc.d/rc.local，在最后一行添加 1&#x2F;root&#x2F;ss&#x2F;ss-server.sh 开机就可以自启动了 客户端客户端下载地址： Android：https://github.com/shadowsocks/shadowsocks-android/releases macOS：https://github.com/shadowsocks/ShadowsocksX-NG/releases Windows：https://github.com/shadowsocks/shadowsocks-windows/releases Linux：https://github.com/shadowsocks/shadowsocks-qt5/releases","categories":[],"tags":[{"name":"vpn","slug":"vpn","permalink":"http://blog.c2wei.cn/tags/vpn/"},{"name":"翻墙","slug":"翻墙","permalink":"http://blog.c2wei.cn/tags/%E7%BF%BB%E5%A2%99/"}]},{"title":"配置ssh-config使用别名连接服务器","slug":"配置ssh-config使用别名连接服务器","date":"2017-05-11T08:33:53.000Z","updated":"2019-12-17T03:55:09.103Z","comments":true,"path":"2017/05/11/配置ssh-config使用别名连接服务器/","link":"","permalink":"http://blog.c2wei.cn/2017/05/11/%E9%85%8D%E7%BD%AEssh-config%E4%BD%BF%E7%94%A8%E5%88%AB%E5%90%8D%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"我们在使用ssh进行远程连接时，每一次都输入远程主机的ip和密码是比较麻烦的，像服务器需要经常连接且如果有多个服务器也不方便记忆ip和密码 通过部署密钥和配置一个config，可以使用别名且不需要输入密码就可以连接 本地先生成ssh密钥，打开终端 1ssh-keygen -t rsa 一路回车即可， 然后将本地的ssh密钥发送到服务器建立信任 1ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@server_ip 这时通过命令ssh root@server_ip已经可以不需要密码登录服务器了 密钥生成一份可发送到多个服务器，不用为每个服务器单独生成 接下来配置别名，建立一个配置文件，执行vim ~/.ssh/config，内容如下 1Host ali #主机别名2HostName server_ip #主机ip3Port 22 #连接端口4User root #登录的用户5IdentityFile ~&#x2F;.ssh&#x2F;id_rsa #密钥地址67#还有主机就另起一行再写一份8Host tx #主机别名9HostName server_ip #主机ip10Port 22 #连接端口11User root #登录的用户12IdentityFile ~&#x2F;.ssh&#x2F;id_rsa #密钥地址1314...... 现在已经可以使用别名连接了，例 1ssh ali 就会登录到服务器了 如果有问题，把~/.ssh/config里#及#后面的注释删掉","categories":[],"tags":[{"name":"ssh","slug":"ssh","permalink":"http://blog.c2wei.cn/tags/ssh/"}]},{"title":"使用webhooks实现git自动拉取代码","slug":"使用webhooks实现git自动拉取代码","date":"2017-04-25T09:19:49.000Z","updated":"2019-12-15T12:01:29.692Z","comments":true,"path":"2017/04/25/使用webhooks实现git自动拉取代码/","link":"","permalink":"http://blog.c2wei.cn/2017/04/25/%E4%BD%BF%E7%94%A8webhooks%E5%AE%9E%E7%8E%B0git%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81/","excerpt":"","text":"将要自动拉取代码的仓库克隆到服务器，记住位置 以下示例用的仓库服务器地址为/home/wwwroot/website 查看服务器执行php使用的用户编辑php.ini，确保system,shell_exec函数没有被禁用 通过如下php脚本查看服务器是用哪个用户执行php程序的 1&lt;?php2system(\"whoami\"); 浏览器请求这个php文件，可以看到结果，我的是www用户 将/home/wwwroot/blog的所有者设为该www用户 1chown -R www:www /home/wwwroot/website 这样做的意义是保证hooks执行时拥有操作/home/wwwroot/website的权限 设置git基本信息这里设置的是www用户，即执行php使用的用户的git基本信息 1sudo -Hu www git config --global user.name &quot;username&quot;2sudo -Hu www git config --global user.email &quot;email@example.com&quot; 3&#x2F;&#x2F;邮箱要与github上一致 没有基本信息是无法拉取代码的 配置部署公钥先在服务器生成部署公钥 1sudo -Hu www ssh-keygen -t rsa -C &quot;your_name@example.com&quot; 2&#x2F;&#x2F;注意修改邮箱 查看密钥内容并复制 1cat &#x2F;home&#x2F;www&#x2F;.ssh&#x2F;id_rsa.pub 到github打开repositories的setting页-&gt;Deploy keys-&gt;Add deploy key，在key处填入复制的内容，title随意起一个用于辨别，点击Add key 配置webhooks到github打开repositories的setting页-&gt;Webhooks-&gt;Add Webhook: Payload URL填写hooks脚本的地址，如c2wei.cn/hooks.php，确保可以正确访问且和自动拉取的代码同服务器即可 Content Type保持默认 Secret填写一个密码，用于检验防止恶意请求，随意填写，如helloworld 剩下的勾选项保持默认，默认只在push事件发生时自定拉取，也可以配置更多事件 编写hooks编写hooks.php，并保证访问地址为上一步填写的，脚本内容如下 1&lt;?php2$secret &#x3D; &quot;helloworld&quot;; &#x2F;&#x2F;密钥，和上一步对应3$path &#x3D; &quot;&#x2F;home&#x2F;wwwroot&#x2F;website&quot;; &#x2F;&#x2F;自动拉取代码的文件目录4$signature &#x3D; $_SERVER[&quot;HTTP_X_HUB_SIGNATURE&quot;]; &#x2F;&#x2F;获取散列字符串5if($signature) &#123;6 $data &#x3D; file_get_contents(&quot;php:&#x2F;&#x2F;input&quot;); &#x2F;&#x2F;获取收到的数据7 list($func, $hash) &#x3D; explode(&quot;&#x3D;&quot;, $signature, 2); &#x2F;&#x2F;获取散列算法、散列值8 if ($hash &#x3D;&#x3D;&#x3D; hash_hmac($func, $data, $secret)) &#123; 9 $response &#x3D; shell_exec(&quot;cd &quot;.$path.&quot; &amp;&amp; git pull 2&gt;&amp;1&quot;); &#x2F;&#x2F;拉取代码10 var_dump($response);11 &#125; else &#123;12 echo &quot;验证失败&quot;;13 &#125;14&#125; else &#123;15 echo &quot;密钥错误&quot;;16&#125; 保存脚本，本地push代码测试一下，OK 如果有问题检查文件权限问题，文件权限很关键，保证www用户拥有文件权限 在github的webhooks设置页可以查看hooks请求详情纠错","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://blog.c2wei.cn/tags/git/"}]},{"title":"js定时器实现动画","slug":"js定时器实现动画","date":"2017-04-16T11:33:09.000Z","updated":"2019-12-15T12:02:28.568Z","comments":true,"path":"2017/04/16/js定时器实现动画/","link":"","permalink":"http://blog.c2wei.cn/2017/04/16/js%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB/","excerpt":"","text":"现在网页动画效果有css3，有jquery的animate函数，可以方便的写出各种绚丽的效果。 但是，动画效果是怎么实现的？ 先看动画效果demo:js动画 动画实现原理动画片是通过一帧一帧的连续的图片生成的，js动画也是同理，例如网页中有个方块： 1#box &#123;2 width: 100px;3 height: 200px;4 background-color: yellow;5&#125; 1&lt;div id=\"box\"&gt;&lt;/div&gt; 现在实现一个动画，把方块的宽度慢慢变为200px，实现动画效果要一帧一帧的变化 假设这个过程在一秒内完成，如果设定10ms显示一帧，则一秒一共有100帧，也就是每10ms方块的宽度增加1px 可以通过js的定时器函数实现 1var target = 200;2var box = document.getElementById(\"box\");3var interval = setInterval(function () &#123;4 var width = box.offsetWidth;5 if (width &lt; target) &#123;6 box.style.width = (width+1) + 'px';7 &#125; else &#123;8 clearInterval(interval);9 &#125;10&#125;, 10); 样式获取问题在js中，只有少数几个属性有形如element.offsetWidth的函数获取当前样式， 而element.style只能获取和设置行内样式，外链样式需要通过getComputedStyle函数获取 在动画效果中，是需要不停比较当前样式值和目标样式值的 直接创建一个获取样式的函数： 1var getStyle = function (element, property) &#123;2 var value = element.style[property]3 if (value) &#123;4 return value;5 &#125; else &#123;6 return getComputedStyle(element, null)[property];7 &#125;8&#125; 函数封装我们把动画效果代码封装为一个函数animate 将速度提取出来，使其可定义，即动画执行时间 还要注意速度为负数的情况，即变小 1//定时器2var interval = null;3//time为动画时间 单位s4function animate(element, property, target, time) &#123;5 //设定每帧时间 单位ms6 var rate = 30; 7 //计算速度 每帧变动量8 var speed = (target - parseInt(getStyle(element, property))) / (time/rate*1000);9 clearInterval(interval); //先清空一次 避免动画未完成时函数又被调用10 interval = setInterval(function () &#123;11 //计算当前位置12 var offset = parseInt(getStyle(element, property));13 if (offset &lt; target &amp;&amp; speed &gt; 0) &#123; //变大时14 element.style[property] = (offset+speed)+'px' ;15 &#125; else if (offset &gt; target &amp;&amp; speed &lt; 0) &#123; //变小时16 element.style[property] = (offset+speed)+'px';17 &#125; else &#123; //结束时18 element.style[property] = target+'px';19 clearInterval(interval);20 &#125;21 &#125;, rate);22&#125; 后续问题思考多页面元素同时运动上一部份代码有一个明显的缺陷，interval作为公共变量被声明 如果有两个或多个元素同时使用animate函数，则interval变量也是同一个，同时工作的定时器只有一个 因此无法实现多页面元素的同时运动，解决方法是给每个元素分配一个定时器 直接给元素一个新属性，储存定时器，改动如下： 1function animate(element, property, target, time) &#123;2 element.interval = null; //interval直接设置为element的属性3 var rate = ...略 同上一部分4 var speed = ...略 同上一部分5 clearInterval(interval);6 element.interval = setInterval(function() &#123;7 ......省略8 &#125;)9&#125; 链式运动链式运动就是一个动画结束，另一个动画立即开始，一个动画接一个动画，形成动画链 可以通过添加一个回调函数fn实现，在动画结束时调用fn，fn传在参数里： 1function animate(element, property, target, time, fn) &#123;2 var rate = ......省略3 var speed = ......省略;4 clearInterval(element.interval);5 element.interval = setInterval(function () &#123;6 var offset = .....省略;7 if (判定动画未完成的条件) &#123;8 ........省略9 &#125; else &#123;10 element.style[property] = target+'px';11 clearInterval(interval);12 //重点 在动画结束时 若存在回调函数 调用回调函数13 if (fn) fn();14 &#125;15 &#125;, rate);16&#125; 使用方法 1animate(box, 'width', 200, 1, function() &#123;2 animate(box, 'height', 300, 2);3&#125;); 多样式同时运动把样式和样式目标用一个{}类型传入，遍历它操作 如： 1&#123;2 width: &#39;300px&#39;,3 height: &#39;300px&#39;4&#125; 代码： property为一个{}类型，链式效果用回调函数实现 1var animate = function (element, property, time, fn) &#123;2 var propertyList = Object.keys(property);3 if (propertyList.length &lt; 1) return;4 var rate = 30;5 var speedList = &#123;&#125;;6 for (var i = 0; i &lt; propertyList.length; i ++) &#123;7 var target = parseInt(property[propertyList[i]]);8 speedList[propertyList[i]] = (target - parseInt(getStyle(element, propertyList[i]))) / (time/rate*1000);9 &#125;10 clearInterval(element.interval);11 element.interval = setInterval(function () &#123;12 var completed = true;13 for (var i = 0; i &lt; propertyList.length; i ++) &#123;14 var offset = parseInt(getStyle(element, propertyList[i]));15 var target = parseInt(property[propertyList[i]]);16 var speed = speedList[propertyList[i]];17 if ((offset &lt; target &amp;&amp; speed &gt; 0)||18 (offset &gt; target &amp;&amp; speed &lt; 0)) &#123;19 completed = false;20 element.style[propertyList[i]] = (offset+speed)+'px';21 &#125; else &#123;22 element.style[propertyList[i]] = target+'px';23 &#125;24 &#125; 25 if (completed) &#123;26 clearInterval(element.interval)27 if (fn) fn();28 &#125;29 &#125;, rate);30&#125;","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://blog.c2wei.cn/tags/javascript/"},{"name":"网页动画","slug":"网页动画","permalink":"http://blog.c2wei.cn/tags/%E7%BD%91%E9%A1%B5%E5%8A%A8%E7%94%BB/"}]},{"title":"ubuntu16更换主题","slug":"ubuntu16更换主题","date":"2017-04-11T12:56:44.000Z","updated":"2019-12-16T12:12:06.272Z","comments":true,"path":"2017/04/11/ubuntu16更换主题/","link":"","permalink":"http://blog.c2wei.cn/2017/04/11/ubuntu16%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/","excerpt":"","text":"美化任务栏1sudo apt-get install docky mac风格的任务栏 安装Unity Tweak Toolubuntu16.04默认使用的是Unity桌面环境，可以通过Unity Tweak Tool软件配置，这是一个非常好用的 Unity 图形化管理工具，有许多可用的主题图标，还可以修改工作区数量、热区等。 安装： 1sudo apt-get install unity-tweak-tool 命令行输入软件名称可以打开，即： 1unity-tweak-tool 安装好后就可以打开软件更换主题和图标了以下为几套好看的主题的安装命令 主题与图标Flatabulous主题1sudo add-apt-repository ppa:noobslab&#x2F;themes2sudo apt-get update3sudo apt-get install flatabulous-theme 该主题有配套的图标Ultra-flat:，安装方式如下：1sudo add-apt-repository ppa:noobslab&#x2F;icons2sudo apt-get update3sudo apt-get install4 ultra-flat-icons numix-gtk-theme主题1sudo add-apt-repository ppa:numix&#x2F;ppa2sudo apt-get update3sudo apt-get install numix-gtk-theme numix-icon-theme-circle paper-icon-theme图标1sudo add-apt-repository ppa:snwh&#x2F;pulp2sudo apt-get update3sudo apt-get install paper-icon-theme numix-icon-theme-circle图标1sudo add-apt-repository ppa:numix&#x2F;ppa2sudo apt-get update3sudo apt-get install numix-gtk-theme numix-icon-theme-circle xenlism-wildfire-icon-theme图标1sudo apt-key adv --keyserver keys.gnupg.net --recv-keys 90127F5B2echo &quot;deb http:&#x2F;&#x2F;downloads.sourceforge.net&#x2F;project&#x2F;xenlism-wildfire&#x2F;repo deb&#x2F;&quot; | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;sources.list 3sudo apt-get update 4sudo apt-get install xenlism-wildfire-icon-theme mac风格主题图标1sudo add-apt-repository ppa:noobslab&#x2F;macbuntu2sudo apt-get update3sudo apt-get install macbuntu-os-icons-lts-v74sudo apt-get install macbuntu-os-ithemes-lts-v7 更多主题和图标可以访问https://www.gnome-look.org获取更多主题和图标","categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.c2wei.cn/categories/ubuntu/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.c2wei.cn/tags/ubuntu/"}]},{"title":"ubuntu16执行apt-get报错","slug":"ubuntu16执行apt-get报错","date":"2017-04-10T12:39:51.000Z","updated":"2019-12-16T14:07:48.540Z","comments":true,"path":"2017/04/10/ubuntu16执行apt-get报错/","link":"","permalink":"http://blog.c2wei.cn/2017/04/10/ubuntu16%E6%89%A7%E8%A1%8Capt-get%E6%8A%A5%E9%94%99/","excerpt":"","text":"系统版本是Ubuntu 16.04 amd64 运行sudo apt-get update报错错误详情： 1Reading package lists... Done2E: Problem executing scripts APT::Update::Post-Invoke-Success3&#39;if &#x2F;usr&#x2F;bin&#x2F;test -w &#x2F;var&#x2F;cache&#x2F;app-info -a -e &#x2F;usr&#x2F;bin&#x2F;appstreamcli;4 then appstreamcli refresh &gt; &#x2F;dev&#x2F;null;5 fi&#39;6E: Sub-process returned an error code 在运行sudo apt-get update时出现如上信息，解决方法如下： 1sudo pkill -KILL appstreamcli2wget -P &#x2F;tmp https:&#x2F;&#x2F;launchpad.net&#x2F;ubuntu&#x2F;+archive&#x2F;primary&#x2F;+files&#x2F;appstream_0.9.4-1ubuntu1_amd64.deb 3wget -P https:&#x2F;&#x2F;launchpad.net&#x2F;ubuntu&#x2F;+archive&#x2F;primary&#x2F;+files&#x2F;libappstream3_0.9.4-1ubuntu1_amd64.deb4sudo dpkg -i &#x2F;tmp&#x2F;appstream_0.9.4-1ubuntu1_amd64.deb &#x2F;tmp&#x2F;libappstream3_0.9.4-1ubuntu1_amd64.deb 执行完上述命令之后再次运行sudo apt-get update就不会再出现上面的错误。 报错有锁错误详情： 1E: 无法获得锁 &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;lock - open (11: 资源暂时不可用)2E: 无法对目录 &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F; 加锁 运行和apt、apt-get有关的命令时出现上述问题，先确认是不是有另外的安装命令在进行，有的话等安装结束再执行，没有的话一般是上次apt/apt-get操作未正常结束，解决方法： 直接删除锁文件 1sudo rm -f &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;lock 删除掉就可以了","categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.c2wei.cn/categories/ubuntu/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.c2wei.cn/tags/ubuntu/"}]},{"title":"ubuntu下sublime不能输入中文解决","slug":"ubuntu下sublime不能输入中文解决","date":"2017-04-09T02:45:11.000Z","updated":"2019-12-15T12:01:06.668Z","comments":true,"path":"2017/04/09/ubuntu下sublime不能输入中文解决/","link":"","permalink":"http://blog.c2wei.cn/2017/04/09/ubuntu%E4%B8%8Bsublime%E4%B8%8D%E8%83%BD%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E8%A7%A3%E5%86%B3/","excerpt":"","text":"本文适用于ubuntu16 让sublime支持gbk编码安装convertToUTF8插件首先，按住ctrl+shift+p，然后，在弹出的搜索框中输入install package最后，输入ConvertToUTF8，等待安装安装完成后重启subline Text3即可。 让sublime支持中文输入法本部分只包含让sublime支持中文输入法 下载我们需要的文件(在github上有编译好的共享库)，打开终端，输入： 1git clone https:&#x2F;&#x2F;github.com&#x2F;lyfeyaj&#x2F;sublime-text-imfix.git 将subl移动到/usr/bin/，并且将sublime-imfix.so移动到/opt/sublime_text/（sublime的安装目录）终端输入： 1cd ~&#x2F;sublime-text-imfix2sudo cp .&#x2F;lib&#x2F;libsublime-imfix.so &#x2F;opt&#x2F;sublime_text&#x2F;3sudo cp .&#x2F;src&#x2F;subl &#x2F;usr&#x2F;bin&#x2F; 用subl命令试试能不能启动sublime，如果成功启动的话，应该就可以输入中文了 终端输入： 1LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so subl 将上面的启动命令替换到启动器中 打开sublime-text.desktop 1cd &#x2F;usr&#x2F;share&#x2F;applications&#x2F;2sudo vim sublime_text.desktop 修改sublime-text.desktop 1[Desktop Entry]2Version&#x3D;1.03Type&#x3D;Application4Name&#x3D;Sublime Text5GenericName&#x3D;Text Editor6Comment&#x3D;Sophisticated text editor for code, markup and prose7Exec&#x3D;&#x2F;usr&#x2F;bin&#x2F;subl %F &#x2F;&#x2F;此行修改为 Exec&#x3D;bash -c &quot;LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so subl&quot;8Terminal&#x3D;false9MimeType&#x3D;text&#x2F;plain;10Icon&#x3D;sublime-text11Categories&#x3D;TextEditor;Development;Utility;12StartupNotify&#x3D;true13Actions&#x3D;Window;Document;1415X-Desktop-File-Install-Version&#x3D;0.221617[Desktop Action Window]18Name&#x3D;New Window19Exec&#x3D;&#x2F;usr&#x2F;bin&#x2F;subl -n&#x2F;&#x2F;此行修改为 Exec&#x3D;bash -c &quot;LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so subl&quot;20OnlyShowIn&#x3D;Unity;2122[Desktop Action Document]23Name&#x3D;New File24Exec&#x3D;&#x2F;usr&#x2F;bin&#x2F;subl --command new_file&#x2F;&#x2F;此行修改为 Exec&#x3D;bash -c &quot;LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so subl&quot;25OnlyShowIn&#x3D;Unity; sublime_text.desktop关键是修改形式为Exec=xxxx这几行，Exec=后跟的为启动器的执行命令 安装sublime没有找到启动器本部分从头开始安装sublime并添加中文输入支持 Ubuntu安装sublime到 sublime官网下载linux可用的sublime_text_3程序包(非安装包) 解压后得到一个sublime_text_3文件夹 把文件夹移动到/opt/ 1mv sublime_text_3 &#x2F;opt&#x2F; 然后重命名为sublime_text 1mv &#x2F;opt&#x2F;sublime_text_3 &#x2F;opt&#x2F;sublime_text 在sublime_text文件夹里可以找到一个sublime.desktop复制到桌面上（后面编辑、双击的全是桌面上这个sublime.desktop） 右击sublime.desktop 找到属性 改为可执行程序 这时候双击它应该可以启动sublime 下载和添加中文支持共享库下载我们需要的文件，打开终端，输入： 1git clone https:&#x2F;&#x2F;github.com&#x2F;lyfeyaj&#x2F;sublime-text-imfix.git 将subl移动到/usr/bin/，并且将sublime-imfix.so移动到/opt/sublime_text/（sublime的安装目录）终端输入： 1cd ~&#x2F;sublime-text-imfix2sudo cp .&#x2F;lib&#x2F;libsublime-imfix.so &#x2F;opt&#x2F;sublime_text&#x2F;3sudo cp .&#x2F;src&#x2F;subl &#x2F;usr&#x2F;bin&#x2F; 用subl命令试试能不能启动sublime，如果成功启动的话，应该就可以输入中文了。终端输入： 1LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so subl 将启动命令添加到sublime.desktop右击sublime.desktop 选择属性 找到命令一栏改成如下： 1bash - c &quot;LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so subl&quot; 这时候双击启动文件启动也能输入中文了 再从桌面上把sublime.desktop拖放到启动面板里 完成","categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.c2wei.cn/categories/ubuntu/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.c2wei.cn/tags/ubuntu/"}]}]}